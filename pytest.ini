# pytest configuration file
# This file configures pytest behavior and defines custom markers for the test suite

[pytest]
# Test discovery patterns
# pytest will look for test files matching these patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Default command line options
# -v: verbose output showing test names
# --strict-markers: ensure all markers are defined in this file
# --tb=short: shorter traceback format for failures
addopts = -v --strict-markers --tb=short

# Test paths - where pytest should look for tests
testpaths = tests

# Custom markers definition
# Markers allow us to categorize and selectively run tests
# Usage: @pytest.mark.marker_name
markers =
    # Quick smoke tests that verify basic functionality (< 1 minute total)
    # Run with: pytest -m sanity
    sanity: Quick health checks that verify the system is alive and basic functionality works
    
    # Comprehensive tests ensuring new code doesn't break existing features
    # Run with: pytest -m regression
    regression: Thorough tests that prevent regressions in existing functionality
    
    # End-to-end tests simulating complete user journeys
    # Run with: pytest -m e2e
    e2e: Full system tests that simulate real user workflows from start to finish
    
    # Performance and load tests that push the system to its limits
    # Run with: pytest -m stress
    stress: Tests that stress the system to find breaking points and performance limits
    
    # Tests that take longer to run (useful for excluding during development)
    # Run all except slow: pytest -m "not slow"
    slow: Tests that take significant time to execute
    
    # Integration tests that test multiple components together
    integration: Tests that verify multiple components work together correctly
    
    # Unit tests that test individual functions or methods
    unit: Tests that verify individual units of code work correctly in isolation
    
    # Security-focused tests (subset of unit tests)
    security: Tests that verify security measures, authentication, and protection against attacks
    
    # Input validation tests (subset of unit tests)
    validation: Tests that verify input validation, data sanitization, and error handling

# Coverage configuration
# Specify which directories to include/exclude from coverage reports
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */site-packages/*

# Coverage report configuration
[coverage:report]
# Fail if coverage is below this percentage
fail_under = 0
# Show lines that weren't covered
show_missing = True
# Skip files with no executable code
skip_empty = True
# Exclude lines matching these patterns from coverage
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    pass

# Pytest timeout configuration
# Global timeout for all tests (in seconds)
# Individual tests can override with @pytest.mark.timeout(X)
timeout = 300
timeout_method = thread

# Disable warnings that clutter test output
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning